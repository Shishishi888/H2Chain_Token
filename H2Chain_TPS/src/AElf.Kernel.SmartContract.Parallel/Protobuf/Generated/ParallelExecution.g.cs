// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: parallel_execution.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AElf.Kernel.SmartContract {

  /// <summary>Holder for reflection information generated from parallel_execution.proto</summary>
  public static partial class ParallelExecutionReflection {

    #region Descriptor
    /// <summary>File descriptor for parallel_execution.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ParallelExecutionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhwYXJhbGxlbF9leGVjdXRpb24ucHJvdG8aD2FlbGYvY29yZS5wcm90byKD",
            "AgoXVHJhbnNhY3Rpb25SZXNvdXJjZUluZm8SKgoLd3JpdGVfcGF0aHMYASAD",
            "KAsyFS5hZWxmLlNjb3BlZFN0YXRlUGF0aBIpCgpyZWFkX3BhdGhzGAIgAygL",
            "MhUuYWVsZi5TY29wZWRTdGF0ZVBhdGgSJAoNcGFyYWxsZWxfdHlwZRgDIAEo",
            "DjINLlBhcmFsbGVsVHlwZRIiCg50cmFuc2FjdGlvbl9pZBgEIAEoCzIKLmFl",
            "bGYuSGFzaBIhCg1jb250cmFjdF9oYXNoGAUgASgLMgouYWVsZi5IYXNoEiQK",
            "HGlzX25vbnBhcmFsbGVsX2NvbnRyYWN0X2NvZGUYBiABKAgiOAoXTm9ucGFy",
            "YWxsZWxDb250cmFjdENvZGUSHQoJY29kZV9oYXNoGAEgASgLMgouYWVsZi5I",
            "YXNoKlgKDFBhcmFsbGVsVHlwZRISCg5QQVJBTExFTElaQUJMRRAAEhYKEk5P",
            "Tl9QQVJBTExFTElaQUJMRRABEhwKGElOVkFMSURfQ09OVFJBQ1RfQUREUkVT",
            "UxACQhyqAhlBRWxmLktlcm5lbC5TbWFydENvbnRyYWN0YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AElf.Types.CoreReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::AElf.Kernel.SmartContract.ParallelType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.SmartContract.TransactionResourceInfo), global::AElf.Kernel.SmartContract.TransactionResourceInfo.Parser, new[]{ "WritePaths", "ReadPaths", "ParallelType", "TransactionId", "ContractHash", "IsNonparallelContractCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.SmartContract.NonparallelContractCode), global::AElf.Kernel.SmartContract.NonparallelContractCode.Parser, new[]{ "CodeHash" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ParallelType {
    [pbr::OriginalName("PARALLELIZABLE")] Parallelizable = 0,
    [pbr::OriginalName("NON_PARALLELIZABLE")] NonParallelizable = 1,
    [pbr::OriginalName("INVALID_CONTRACT_ADDRESS")] InvalidContractAddress = 2,
  }

  #endregion

  #region Messages
  public sealed partial class TransactionResourceInfo : pb::IMessage<TransactionResourceInfo> {
    private static readonly pb::MessageParser<TransactionResourceInfo> _parser = new pb::MessageParser<TransactionResourceInfo>(() => new TransactionResourceInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionResourceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.SmartContract.ParallelExecutionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionResourceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionResourceInfo(TransactionResourceInfo other) : this() {
      writePaths_ = other.writePaths_.Clone();
      readPaths_ = other.readPaths_.Clone();
      parallelType_ = other.parallelType_;
      transactionId_ = other.transactionId_ != null ? other.transactionId_.Clone() : null;
      contractHash_ = other.contractHash_ != null ? other.contractHash_.Clone() : null;
      isNonparallelContractCode_ = other.isNonparallelContractCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionResourceInfo Clone() {
      return new TransactionResourceInfo(this);
    }

    /// <summary>Field number for the "write_paths" field.</summary>
    public const int WritePathsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Types.ScopedStatePath> _repeated_writePaths_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Types.ScopedStatePath.Parser);
    private readonly pbc::RepeatedField<global::AElf.Types.ScopedStatePath> writePaths_ = new pbc::RepeatedField<global::AElf.Types.ScopedStatePath>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Types.ScopedStatePath> WritePaths {
      get { return writePaths_; }
    }

    /// <summary>Field number for the "read_paths" field.</summary>
    public const int ReadPathsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::AElf.Types.ScopedStatePath> _repeated_readPaths_codec
        = pb::FieldCodec.ForMessage(18, global::AElf.Types.ScopedStatePath.Parser);
    private readonly pbc::RepeatedField<global::AElf.Types.ScopedStatePath> readPaths_ = new pbc::RepeatedField<global::AElf.Types.ScopedStatePath>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Types.ScopedStatePath> ReadPaths {
      get { return readPaths_; }
    }

    /// <summary>Field number for the "parallel_type" field.</summary>
    public const int ParallelTypeFieldNumber = 3;
    private global::AElf.Kernel.SmartContract.ParallelType parallelType_ = global::AElf.Kernel.SmartContract.ParallelType.Parallelizable;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Kernel.SmartContract.ParallelType ParallelType {
      get { return parallelType_; }
      set {
        parallelType_ = value;
      }
    }

    /// <summary>Field number for the "transaction_id" field.</summary>
    public const int TransactionIdFieldNumber = 4;
    private global::AElf.Types.Hash transactionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash TransactionId {
      get { return transactionId_; }
      set {
        transactionId_ = value;
      }
    }

    /// <summary>Field number for the "contract_hash" field.</summary>
    public const int ContractHashFieldNumber = 5;
    private global::AElf.Types.Hash contractHash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash ContractHash {
      get { return contractHash_; }
      set {
        contractHash_ = value;
      }
    }

    /// <summary>Field number for the "is_nonparallel_contract_code" field.</summary>
    public const int IsNonparallelContractCodeFieldNumber = 6;
    private bool isNonparallelContractCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNonparallelContractCode {
      get { return isNonparallelContractCode_; }
      set {
        isNonparallelContractCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionResourceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionResourceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!writePaths_.Equals(other.writePaths_)) return false;
      if(!readPaths_.Equals(other.readPaths_)) return false;
      if (ParallelType != other.ParallelType) return false;
      if (!object.Equals(TransactionId, other.TransactionId)) return false;
      if (!object.Equals(ContractHash, other.ContractHash)) return false;
      if (IsNonparallelContractCode != other.IsNonparallelContractCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= writePaths_.GetHashCode();
      hash ^= readPaths_.GetHashCode();
      if (ParallelType != global::AElf.Kernel.SmartContract.ParallelType.Parallelizable) hash ^= ParallelType.GetHashCode();
      if (transactionId_ != null) hash ^= TransactionId.GetHashCode();
      if (contractHash_ != null) hash ^= ContractHash.GetHashCode();
      if (IsNonparallelContractCode != false) hash ^= IsNonparallelContractCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      writePaths_.WriteTo(output, _repeated_writePaths_codec);
      readPaths_.WriteTo(output, _repeated_readPaths_codec);
      if (ParallelType != global::AElf.Kernel.SmartContract.ParallelType.Parallelizable) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ParallelType);
      }
      if (transactionId_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TransactionId);
      }
      if (contractHash_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ContractHash);
      }
      if (IsNonparallelContractCode != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsNonparallelContractCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += writePaths_.CalculateSize(_repeated_writePaths_codec);
      size += readPaths_.CalculateSize(_repeated_readPaths_codec);
      if (ParallelType != global::AElf.Kernel.SmartContract.ParallelType.Parallelizable) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ParallelType);
      }
      if (transactionId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransactionId);
      }
      if (contractHash_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContractHash);
      }
      if (IsNonparallelContractCode != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionResourceInfo other) {
      if (other == null) {
        return;
      }
      writePaths_.Add(other.writePaths_);
      readPaths_.Add(other.readPaths_);
      if (other.ParallelType != global::AElf.Kernel.SmartContract.ParallelType.Parallelizable) {
        ParallelType = other.ParallelType;
      }
      if (other.transactionId_ != null) {
        if (transactionId_ == null) {
          TransactionId = new global::AElf.Types.Hash();
        }
        TransactionId.MergeFrom(other.TransactionId);
      }
      if (other.contractHash_ != null) {
        if (contractHash_ == null) {
          ContractHash = new global::AElf.Types.Hash();
        }
        ContractHash.MergeFrom(other.ContractHash);
      }
      if (other.IsNonparallelContractCode != false) {
        IsNonparallelContractCode = other.IsNonparallelContractCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            writePaths_.AddEntriesFrom(input, _repeated_writePaths_codec);
            break;
          }
          case 18: {
            readPaths_.AddEntriesFrom(input, _repeated_readPaths_codec);
            break;
          }
          case 24: {
            ParallelType = (global::AElf.Kernel.SmartContract.ParallelType) input.ReadEnum();
            break;
          }
          case 34: {
            if (transactionId_ == null) {
              TransactionId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(TransactionId);
            break;
          }
          case 42: {
            if (contractHash_ == null) {
              ContractHash = new global::AElf.Types.Hash();
            }
            input.ReadMessage(ContractHash);
            break;
          }
          case 48: {
            IsNonparallelContractCode = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NonparallelContractCode : pb::IMessage<NonparallelContractCode> {
    private static readonly pb::MessageParser<NonparallelContractCode> _parser = new pb::MessageParser<NonparallelContractCode>(() => new NonparallelContractCode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NonparallelContractCode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.SmartContract.ParallelExecutionReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NonparallelContractCode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NonparallelContractCode(NonparallelContractCode other) : this() {
      codeHash_ = other.codeHash_ != null ? other.codeHash_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NonparallelContractCode Clone() {
      return new NonparallelContractCode(this);
    }

    /// <summary>Field number for the "code_hash" field.</summary>
    public const int CodeHashFieldNumber = 1;
    private global::AElf.Types.Hash codeHash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash CodeHash {
      get { return codeHash_; }
      set {
        codeHash_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NonparallelContractCode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NonparallelContractCode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CodeHash, other.CodeHash)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (codeHash_ != null) hash ^= CodeHash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (codeHash_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CodeHash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (codeHash_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CodeHash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NonparallelContractCode other) {
      if (other == null) {
        return;
      }
      if (other.codeHash_ != null) {
        if (codeHash_ == null) {
          CodeHash = new global::AElf.Types.Hash();
        }
        CodeHash.MergeFrom(other.CodeHash);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (codeHash_ == null) {
              CodeHash = new global::AElf.Types.Hash();
            }
            input.ReadMessage(CodeHash);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
