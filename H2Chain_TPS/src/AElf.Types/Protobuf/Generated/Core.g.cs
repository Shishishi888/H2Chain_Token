// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: aelf/core.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AElf.Types {

  /// <summary>Holder for reflection information generated from aelf/core.proto</summary>
  public static partial class CoreReflection {

    #region Descriptor
    /// <summary>File descriptor for aelf/core.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CoreReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9hZWxmL2NvcmUucHJvdG8SBGFlbGYisgEKC1RyYW5zYWN0aW9uEhsKBGZy",
            "b20YASABKAsyDS5hZWxmLkFkZHJlc3MSGQoCdG8YAiABKAsyDS5hZWxmLkFk",
            "ZHJlc3MSGAoQcmVmX2Jsb2NrX251bWJlchgDIAEoAxIYChByZWZfYmxvY2tf",
            "cHJlZml4GAQgASgMEhMKC21ldGhvZF9uYW1lGAUgASgJEg4KBnBhcmFtcxgG",
            "IAEoDBISCglzaWduYXR1cmUYkE4gASgMIhoKCVN0YXRlUGF0aBINCgVwYXJ0",
            "cxgBIAMoCSJQCg9TY29wZWRTdGF0ZVBhdGgSHgoHYWRkcmVzcxgBIAEoCzIN",
            "LmFlbGYuQWRkcmVzcxIdCgRwYXRoGAIgASgLMg8uYWVsZi5TdGF0ZVBhdGgi",
            "7gEKEVRyYW5zYWN0aW9uUmVzdWx0EiIKDnRyYW5zYWN0aW9uX2lkGAEgASgL",
            "MgouYWVsZi5IYXNoEi0KBnN0YXR1cxgCIAEoDjIdLmFlbGYuVHJhbnNhY3Rp",
            "b25SZXN1bHRTdGF0dXMSHAoEbG9ncxgDIAMoCzIOLmFlbGYuTG9nRXZlbnQS",
            "DQoFYmxvb20YBCABKAwSFAoMcmV0dXJuX3ZhbHVlGAUgASgMEhQKDGJsb2Nr",
            "X251bWJlchgGIAEoAxIeCgpibG9ja19oYXNoGAcgASgLMgouYWVsZi5IYXNo",
            "Eg0KBWVycm9yGAogASgJIl4KCExvZ0V2ZW50Eh4KB2FkZHJlc3MYASABKAsy",
            "DS5hZWxmLkFkZHJlc3MSDAoEbmFtZRgCIAEoCRIPCgdpbmRleGVkGAMgAygM",
            "EhMKC25vbl9pbmRleGVkGAQgASgMIocBChlTbWFydENvbnRyYWN0UmVnaXN0",
            "cmF0aW9uEhAKCGNhdGVnb3J5GAEgASgREgwKBGNvZGUYAiABKAwSHQoJY29k",
            "ZV9oYXNoGAMgASgLMgouYWVsZi5IYXNoEhoKEmlzX3N5c3RlbV9jb250cmFj",
            "dBgEIAEoCBIPCgd2ZXJzaW9uGAUgASgFIusCChxUcmFuc2FjdGlvbkV4ZWN1",
            "dGluZ1N0YXRlU2V0Ej4KBndyaXRlcxgBIAMoCzIuLmFlbGYuVHJhbnNhY3Rp",
            "b25FeGVjdXRpbmdTdGF0ZVNldC5Xcml0ZXNFbnRyeRI8CgVyZWFkcxgCIAMo",
            "CzItLmFlbGYuVHJhbnNhY3Rpb25FeGVjdXRpbmdTdGF0ZVNldC5SZWFkc0Vu",
            "dHJ5EkAKB2RlbGV0ZXMYAyADKAsyLy5hZWxmLlRyYW5zYWN0aW9uRXhlY3V0",
            "aW5nU3RhdGVTZXQuRGVsZXRlc0VudHJ5Gi0KC1dyaXRlc0VudHJ5EgsKA2tl",
            "eRgBIAEoCRINCgV2YWx1ZRgCIAEoDDoCOAEaLAoKUmVhZHNFbnRyeRILCgNr",
            "ZXkYASABKAkSDQoFdmFsdWUYAiABKAg6AjgBGi4KDERlbGV0ZXNFbnRyeRIL",
            "CgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAg6AjgBIhgKB0FkZHJlc3MSDQoF",
            "dmFsdWUYASABKAwiFQoESGFzaBINCgV2YWx1ZRgBIAEoDCIcCgtTSW50MzJW",
            "YWx1ZRINCgV2YWx1ZRgBIAEoESIcCgtTSW50NjRWYWx1ZRINCgV2YWx1ZRgB",
            "IAEoEiI9CgpNZXJrbGVQYXRoEi8KEW1lcmtsZV9wYXRoX25vZGVzGAEgAygL",
            "MhQuYWVsZi5NZXJrbGVQYXRoTm9kZSJGCg5NZXJrbGVQYXRoTm9kZRIYCgRo",
            "YXNoGAEgASgLMgouYWVsZi5IYXNoEhoKEmlzX2xlZnRfY2hpbGRfbm9kZRgC",
            "IAEoCCJbChBCaW5hcnlNZXJrbGVUcmVlEhkKBW5vZGVzGAEgAygLMgouYWVs",
            "Zi5IYXNoEhgKBHJvb3QYAiABKAsyCi5hZWxmLkhhc2gSEgoKbGVhZl9jb3Vu",
            "dBgDIAEoBSqQAQoXVHJhbnNhY3Rpb25SZXN1bHRTdGF0dXMSDwoLTk9UX0VY",
            "SVNURUQQABILCgdQRU5ESU5HEAESCgoGRkFJTEVEEAISCQoFTUlORUQQAxIM",
            "CghDT05GTElDVBAEEhYKElBFTkRJTkdfVkFMSURBVElPThAFEhoKFk5PREVf",
            "VkFMSURBVElPTl9GQUlMRUQQBkINqgIKQUVsZi5UeXBlc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::AElf.Types.TransactionResultStatus), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Types.Transaction), global::AElf.Types.Transaction.Parser, new[]{ "From", "To", "RefBlockNumber", "RefBlockPrefix", "MethodName", "Params", "Signature" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Types.StatePath), global::AElf.Types.StatePath.Parser, new[]{ "Parts" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Types.ScopedStatePath), global::AElf.Types.ScopedStatePath.Parser, new[]{ "Address", "Path" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Types.TransactionResult), global::AElf.Types.TransactionResult.Parser, new[]{ "TransactionId", "Status", "Logs", "Bloom", "ReturnValue", "BlockNumber", "BlockHash", "Error" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Types.LogEvent), global::AElf.Types.LogEvent.Parser, new[]{ "Address", "Name", "Indexed", "NonIndexed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Types.SmartContractRegistration), global::AElf.Types.SmartContractRegistration.Parser, new[]{ "Category", "Code", "CodeHash", "IsSystemContract", "Version" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Types.TransactionExecutingStateSet), global::AElf.Types.TransactionExecutingStateSet.Parser, new[]{ "Writes", "Reads", "Deletes" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Types.Address), global::AElf.Types.Address.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Types.Hash), global::AElf.Types.Hash.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Types.SInt32Value), global::AElf.Types.SInt32Value.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Types.SInt64Value), global::AElf.Types.SInt64Value.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Types.MerklePath), global::AElf.Types.MerklePath.Parser, new[]{ "MerklePathNodes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Types.MerklePathNode), global::AElf.Types.MerklePathNode.Parser, new[]{ "Hash", "IsLeftChildNode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Types.BinaryMerkleTree), global::AElf.Types.BinaryMerkleTree.Parser, new[]{ "Nodes", "Root", "LeafCount" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum TransactionResultStatus {
    [pbr::OriginalName("NOT_EXISTED")] NotExisted = 0,
    [pbr::OriginalName("PENDING")] Pending = 1,
    [pbr::OriginalName("FAILED")] Failed = 2,
    [pbr::OriginalName("MINED")] Mined = 3,
    [pbr::OriginalName("CONFLICT")] Conflict = 4,
    [pbr::OriginalName("PENDING_VALIDATION")] PendingValidation = 5,
    [pbr::OriginalName("NODE_VALIDATION_FAILED")] NodeValidationFailed = 6,
  }

  #endregion

  #region Messages
  public sealed partial class Transaction : pb::IMessage<Transaction> {
    private static readonly pb::MessageParser<Transaction> _parser = new pb::MessageParser<Transaction>(() => new Transaction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Types.CoreReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction(Transaction other) : this() {
      from_ = other.from_ != null ? other.from_.Clone() : null;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      refBlockNumber_ = other.refBlockNumber_;
      refBlockPrefix_ = other.refBlockPrefix_;
      methodName_ = other.methodName_;
      params_ = other.params_;
      signature_ = other.signature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction Clone() {
      return new Transaction(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private global::AElf.Types.Address from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private global::AElf.Types.Address to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "ref_block_number" field.</summary>
    public const int RefBlockNumberFieldNumber = 3;
    private long refBlockNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RefBlockNumber {
      get { return refBlockNumber_; }
      set {
        refBlockNumber_ = value;
      }
    }

    /// <summary>Field number for the "ref_block_prefix" field.</summary>
    public const int RefBlockPrefixFieldNumber = 4;
    private pb::ByteString refBlockPrefix_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RefBlockPrefix {
      get { return refBlockPrefix_; }
      set {
        refBlockPrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "method_name" field.</summary>
    public const int MethodNameFieldNumber = 5;
    private string methodName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MethodName {
      get { return methodName_; }
      set {
        methodName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 6;
    private pb::ByteString params_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Params {
      get { return params_; }
      set {
        params_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 10000;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      if (RefBlockNumber != other.RefBlockNumber) return false;
      if (RefBlockPrefix != other.RefBlockPrefix) return false;
      if (MethodName != other.MethodName) return false;
      if (Params != other.Params) return false;
      if (Signature != other.Signature) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (RefBlockNumber != 0L) hash ^= RefBlockNumber.GetHashCode();
      if (RefBlockPrefix.Length != 0) hash ^= RefBlockPrefix.GetHashCode();
      if (MethodName.Length != 0) hash ^= MethodName.GetHashCode();
      if (Params.Length != 0) hash ^= Params.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (from_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(To);
      }
      if (RefBlockNumber != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(RefBlockNumber);
      }
      if (RefBlockPrefix.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(RefBlockPrefix);
      }
      if (MethodName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(MethodName);
      }
      if (Params.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Params);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(130, 241, 4);
        output.WriteBytes(Signature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (RefBlockNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RefBlockNumber);
      }
      if (RefBlockPrefix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RefBlockPrefix);
      }
      if (MethodName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MethodName);
      }
      if (Params.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Params);
      }
      if (Signature.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transaction other) {
      if (other == null) {
        return;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          From = new global::AElf.Types.Address();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Types.Address();
        }
        To.MergeFrom(other.To);
      }
      if (other.RefBlockNumber != 0L) {
        RefBlockNumber = other.RefBlockNumber;
      }
      if (other.RefBlockPrefix.Length != 0) {
        RefBlockPrefix = other.RefBlockPrefix;
      }
      if (other.MethodName.Length != 0) {
        MethodName = other.MethodName;
      }
      if (other.Params.Length != 0) {
        Params = other.Params;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (from_ == null) {
              From = new global::AElf.Types.Address();
            }
            input.ReadMessage(From);
            break;
          }
          case 18: {
            if (to_ == null) {
              To = new global::AElf.Types.Address();
            }
            input.ReadMessage(To);
            break;
          }
          case 24: {
            RefBlockNumber = input.ReadInt64();
            break;
          }
          case 34: {
            RefBlockPrefix = input.ReadBytes();
            break;
          }
          case 42: {
            MethodName = input.ReadString();
            break;
          }
          case 50: {
            Params = input.ReadBytes();
            break;
          }
          case 80002: {
            Signature = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StatePath : pb::IMessage<StatePath> {
    private static readonly pb::MessageParser<StatePath> _parser = new pb::MessageParser<StatePath>(() => new StatePath());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatePath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Types.CoreReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatePath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatePath(StatePath other) : this() {
      parts_ = other.parts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatePath Clone() {
      return new StatePath(this);
    }

    /// <summary>Field number for the "parts" field.</summary>
    public const int PartsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_parts_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> parts_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Parts {
      get { return parts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatePath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatePath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!parts_.Equals(other.parts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= parts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      parts_.WriteTo(output, _repeated_parts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += parts_.CalculateSize(_repeated_parts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatePath other) {
      if (other == null) {
        return;
      }
      parts_.Add(other.parts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            parts_.AddEntriesFrom(input, _repeated_parts_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScopedStatePath : pb::IMessage<ScopedStatePath> {
    private static readonly pb::MessageParser<ScopedStatePath> _parser = new pb::MessageParser<ScopedStatePath>(() => new ScopedStatePath());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScopedStatePath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Types.CoreReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScopedStatePath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScopedStatePath(ScopedStatePath other) : this() {
      address_ = other.address_ != null ? other.address_.Clone() : null;
      path_ = other.path_ != null ? other.path_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScopedStatePath Clone() {
      return new ScopedStatePath(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private global::AElf.Types.Address address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 2;
    private global::AElf.Types.StatePath path_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.StatePath Path {
      get { return path_; }
      set {
        path_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScopedStatePath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScopedStatePath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Address, other.Address)) return false;
      if (!object.Equals(Path, other.Path)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (address_ != null) hash ^= Address.GetHashCode();
      if (path_ != null) hash ^= Path.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (address_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Address);
      }
      if (path_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Path);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (path_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Path);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScopedStatePath other) {
      if (other == null) {
        return;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          Address = new global::AElf.Types.Address();
        }
        Address.MergeFrom(other.Address);
      }
      if (other.path_ != null) {
        if (path_ == null) {
          Path = new global::AElf.Types.StatePath();
        }
        Path.MergeFrom(other.Path);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (address_ == null) {
              Address = new global::AElf.Types.Address();
            }
            input.ReadMessage(Address);
            break;
          }
          case 18: {
            if (path_ == null) {
              Path = new global::AElf.Types.StatePath();
            }
            input.ReadMessage(Path);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransactionResult : pb::IMessage<TransactionResult> {
    private static readonly pb::MessageParser<TransactionResult> _parser = new pb::MessageParser<TransactionResult>(() => new TransactionResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Types.CoreReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionResult(TransactionResult other) : this() {
      transactionId_ = other.transactionId_ != null ? other.transactionId_.Clone() : null;
      status_ = other.status_;
      logs_ = other.logs_.Clone();
      bloom_ = other.bloom_;
      returnValue_ = other.returnValue_;
      blockNumber_ = other.blockNumber_;
      blockHash_ = other.blockHash_ != null ? other.blockHash_.Clone() : null;
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionResult Clone() {
      return new TransactionResult(this);
    }

    /// <summary>Field number for the "transaction_id" field.</summary>
    public const int TransactionIdFieldNumber = 1;
    private global::AElf.Types.Hash transactionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash TransactionId {
      get { return transactionId_; }
      set {
        transactionId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::AElf.Types.TransactionResultStatus status_ = global::AElf.Types.TransactionResultStatus.NotExisted;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.TransactionResultStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "logs" field.</summary>
    public const int LogsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::AElf.Types.LogEvent> _repeated_logs_codec
        = pb::FieldCodec.ForMessage(26, global::AElf.Types.LogEvent.Parser);
    private readonly pbc::RepeatedField<global::AElf.Types.LogEvent> logs_ = new pbc::RepeatedField<global::AElf.Types.LogEvent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Types.LogEvent> Logs {
      get { return logs_; }
    }

    /// <summary>Field number for the "bloom" field.</summary>
    public const int BloomFieldNumber = 4;
    private pb::ByteString bloom_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Bloom {
      get { return bloom_; }
      set {
        bloom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "return_value" field.</summary>
    public const int ReturnValueFieldNumber = 5;
    private pb::ByteString returnValue_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ReturnValue {
      get { return returnValue_; }
      set {
        returnValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "block_number" field.</summary>
    public const int BlockNumberFieldNumber = 6;
    private long blockNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BlockNumber {
      get { return blockNumber_; }
      set {
        blockNumber_ = value;
      }
    }

    /// <summary>Field number for the "block_hash" field.</summary>
    public const int BlockHashFieldNumber = 7;
    private global::AElf.Types.Hash blockHash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash BlockHash {
      get { return blockHash_; }
      set {
        blockHash_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 10;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TransactionId, other.TransactionId)) return false;
      if (Status != other.Status) return false;
      if(!logs_.Equals(other.logs_)) return false;
      if (Bloom != other.Bloom) return false;
      if (ReturnValue != other.ReturnValue) return false;
      if (BlockNumber != other.BlockNumber) return false;
      if (!object.Equals(BlockHash, other.BlockHash)) return false;
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transactionId_ != null) hash ^= TransactionId.GetHashCode();
      if (Status != global::AElf.Types.TransactionResultStatus.NotExisted) hash ^= Status.GetHashCode();
      hash ^= logs_.GetHashCode();
      if (Bloom.Length != 0) hash ^= Bloom.GetHashCode();
      if (ReturnValue.Length != 0) hash ^= ReturnValue.GetHashCode();
      if (BlockNumber != 0L) hash ^= BlockNumber.GetHashCode();
      if (blockHash_ != null) hash ^= BlockHash.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (transactionId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TransactionId);
      }
      if (Status != global::AElf.Types.TransactionResultStatus.NotExisted) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      logs_.WriteTo(output, _repeated_logs_codec);
      if (Bloom.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Bloom);
      }
      if (ReturnValue.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(ReturnValue);
      }
      if (BlockNumber != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(BlockNumber);
      }
      if (blockHash_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BlockHash);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transactionId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransactionId);
      }
      if (Status != global::AElf.Types.TransactionResultStatus.NotExisted) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += logs_.CalculateSize(_repeated_logs_codec);
      if (Bloom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Bloom);
      }
      if (ReturnValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ReturnValue);
      }
      if (BlockNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BlockNumber);
      }
      if (blockHash_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlockHash);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionResult other) {
      if (other == null) {
        return;
      }
      if (other.transactionId_ != null) {
        if (transactionId_ == null) {
          TransactionId = new global::AElf.Types.Hash();
        }
        TransactionId.MergeFrom(other.TransactionId);
      }
      if (other.Status != global::AElf.Types.TransactionResultStatus.NotExisted) {
        Status = other.Status;
      }
      logs_.Add(other.logs_);
      if (other.Bloom.Length != 0) {
        Bloom = other.Bloom;
      }
      if (other.ReturnValue.Length != 0) {
        ReturnValue = other.ReturnValue;
      }
      if (other.BlockNumber != 0L) {
        BlockNumber = other.BlockNumber;
      }
      if (other.blockHash_ != null) {
        if (blockHash_ == null) {
          BlockHash = new global::AElf.Types.Hash();
        }
        BlockHash.MergeFrom(other.BlockHash);
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (transactionId_ == null) {
              TransactionId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(TransactionId);
            break;
          }
          case 16: {
            Status = (global::AElf.Types.TransactionResultStatus) input.ReadEnum();
            break;
          }
          case 26: {
            logs_.AddEntriesFrom(input, _repeated_logs_codec);
            break;
          }
          case 34: {
            Bloom = input.ReadBytes();
            break;
          }
          case 42: {
            ReturnValue = input.ReadBytes();
            break;
          }
          case 48: {
            BlockNumber = input.ReadInt64();
            break;
          }
          case 58: {
            if (blockHash_ == null) {
              BlockHash = new global::AElf.Types.Hash();
            }
            input.ReadMessage(BlockHash);
            break;
          }
          case 82: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LogEvent : pb::IMessage<LogEvent> {
    private static readonly pb::MessageParser<LogEvent> _parser = new pb::MessageParser<LogEvent>(() => new LogEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Types.CoreReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogEvent(LogEvent other) : this() {
      address_ = other.address_ != null ? other.address_.Clone() : null;
      name_ = other.name_;
      indexed_ = other.indexed_.Clone();
      nonIndexed_ = other.nonIndexed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogEvent Clone() {
      return new LogEvent(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private global::AElf.Types.Address address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "indexed" field.</summary>
    public const int IndexedFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_indexed_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> indexed_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Indexed {
      get { return indexed_; }
    }

    /// <summary>Field number for the "non_indexed" field.</summary>
    public const int NonIndexedFieldNumber = 4;
    private pb::ByteString nonIndexed_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NonIndexed {
      get { return nonIndexed_; }
      set {
        nonIndexed_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Address, other.Address)) return false;
      if (Name != other.Name) return false;
      if(!indexed_.Equals(other.indexed_)) return false;
      if (NonIndexed != other.NonIndexed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (address_ != null) hash ^= Address.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= indexed_.GetHashCode();
      if (NonIndexed.Length != 0) hash ^= NonIndexed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (address_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Address);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      indexed_.WriteTo(output, _repeated_indexed_codec);
      if (NonIndexed.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(NonIndexed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += indexed_.CalculateSize(_repeated_indexed_codec);
      if (NonIndexed.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NonIndexed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogEvent other) {
      if (other == null) {
        return;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          Address = new global::AElf.Types.Address();
        }
        Address.MergeFrom(other.Address);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      indexed_.Add(other.indexed_);
      if (other.NonIndexed.Length != 0) {
        NonIndexed = other.NonIndexed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (address_ == null) {
              Address = new global::AElf.Types.Address();
            }
            input.ReadMessage(Address);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            indexed_.AddEntriesFrom(input, _repeated_indexed_codec);
            break;
          }
          case 34: {
            NonIndexed = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SmartContractRegistration : pb::IMessage<SmartContractRegistration> {
    private static readonly pb::MessageParser<SmartContractRegistration> _parser = new pb::MessageParser<SmartContractRegistration>(() => new SmartContractRegistration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SmartContractRegistration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Types.CoreReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartContractRegistration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartContractRegistration(SmartContractRegistration other) : this() {
      category_ = other.category_;
      code_ = other.code_;
      codeHash_ = other.codeHash_ != null ? other.codeHash_.Clone() : null;
      isSystemContract_ = other.isSystemContract_;
      version_ = other.version_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartContractRegistration Clone() {
      return new SmartContractRegistration(this);
    }

    /// <summary>Field number for the "category" field.</summary>
    public const int CategoryFieldNumber = 1;
    private int category_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Category {
      get { return category_; }
      set {
        category_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 2;
    private pb::ByteString code_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "code_hash" field.</summary>
    public const int CodeHashFieldNumber = 3;
    private global::AElf.Types.Hash codeHash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash CodeHash {
      get { return codeHash_; }
      set {
        codeHash_ = value;
      }
    }

    /// <summary>Field number for the "is_system_contract" field.</summary>
    public const int IsSystemContractFieldNumber = 4;
    private bool isSystemContract_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSystemContract {
      get { return isSystemContract_; }
      set {
        isSystemContract_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 5;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SmartContractRegistration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SmartContractRegistration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Category != other.Category) return false;
      if (Code != other.Code) return false;
      if (!object.Equals(CodeHash, other.CodeHash)) return false;
      if (IsSystemContract != other.IsSystemContract) return false;
      if (Version != other.Version) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Category != 0) hash ^= Category.GetHashCode();
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (codeHash_ != null) hash ^= CodeHash.GetHashCode();
      if (IsSystemContract != false) hash ^= IsSystemContract.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Category != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Category);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Code);
      }
      if (codeHash_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CodeHash);
      }
      if (IsSystemContract != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsSystemContract);
      }
      if (Version != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Category != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Category);
      }
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Code);
      }
      if (codeHash_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CodeHash);
      }
      if (IsSystemContract != false) {
        size += 1 + 1;
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SmartContractRegistration other) {
      if (other == null) {
        return;
      }
      if (other.Category != 0) {
        Category = other.Category;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.codeHash_ != null) {
        if (codeHash_ == null) {
          CodeHash = new global::AElf.Types.Hash();
        }
        CodeHash.MergeFrom(other.CodeHash);
      }
      if (other.IsSystemContract != false) {
        IsSystemContract = other.IsSystemContract;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Category = input.ReadSInt32();
            break;
          }
          case 18: {
            Code = input.ReadBytes();
            break;
          }
          case 26: {
            if (codeHash_ == null) {
              CodeHash = new global::AElf.Types.Hash();
            }
            input.ReadMessage(CodeHash);
            break;
          }
          case 32: {
            IsSystemContract = input.ReadBool();
            break;
          }
          case 40: {
            Version = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransactionExecutingStateSet : pb::IMessage<TransactionExecutingStateSet> {
    private static readonly pb::MessageParser<TransactionExecutingStateSet> _parser = new pb::MessageParser<TransactionExecutingStateSet>(() => new TransactionExecutingStateSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionExecutingStateSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Types.CoreReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionExecutingStateSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionExecutingStateSet(TransactionExecutingStateSet other) : this() {
      writes_ = other.writes_.Clone();
      reads_ = other.reads_.Clone();
      deletes_ = other.deletes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionExecutingStateSet Clone() {
      return new TransactionExecutingStateSet(this);
    }

    /// <summary>Field number for the "writes" field.</summary>
    public const int WritesFieldNumber = 1;
    private static readonly pbc::MapField<string, pb::ByteString>.Codec _map_writes_codec
        = new pbc::MapField<string, pb::ByteString>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForBytes(18, pb::ByteString.Empty), 10);
    private readonly pbc::MapField<string, pb::ByteString> writes_ = new pbc::MapField<string, pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, pb::ByteString> Writes {
      get { return writes_; }
    }

    /// <summary>Field number for the "reads" field.</summary>
    public const int ReadsFieldNumber = 2;
    private static readonly pbc::MapField<string, bool>.Codec _map_reads_codec
        = new pbc::MapField<string, bool>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForBool(16, false), 18);
    private readonly pbc::MapField<string, bool> reads_ = new pbc::MapField<string, bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, bool> Reads {
      get { return reads_; }
    }

    /// <summary>Field number for the "deletes" field.</summary>
    public const int DeletesFieldNumber = 3;
    private static readonly pbc::MapField<string, bool>.Codec _map_deletes_codec
        = new pbc::MapField<string, bool>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForBool(16, false), 26);
    private readonly pbc::MapField<string, bool> deletes_ = new pbc::MapField<string, bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, bool> Deletes {
      get { return deletes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionExecutingStateSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionExecutingStateSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Writes.Equals(other.Writes)) return false;
      if (!Reads.Equals(other.Reads)) return false;
      if (!Deletes.Equals(other.Deletes)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Writes.GetHashCode();
      hash ^= Reads.GetHashCode();
      hash ^= Deletes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      writes_.WriteTo(output, _map_writes_codec);
      reads_.WriteTo(output, _map_reads_codec);
      deletes_.WriteTo(output, _map_deletes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += writes_.CalculateSize(_map_writes_codec);
      size += reads_.CalculateSize(_map_reads_codec);
      size += deletes_.CalculateSize(_map_deletes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionExecutingStateSet other) {
      if (other == null) {
        return;
      }
      writes_.Add(other.writes_);
      reads_.Add(other.reads_);
      deletes_.Add(other.deletes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            writes_.AddEntriesFrom(input, _map_writes_codec);
            break;
          }
          case 18: {
            reads_.AddEntriesFrom(input, _map_reads_codec);
            break;
          }
          case 26: {
            deletes_.AddEntriesFrom(input, _map_deletes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Address : pb::IMessage<Address> {
    private static readonly pb::MessageParser<Address> _parser = new pb::MessageParser<Address>(() => new Address());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Address> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Types.CoreReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Address() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Address(Address other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Address Clone() {
      return new Address(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private pb::ByteString value_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Address);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Address other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Address other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Value = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Hash : pb::IMessage<Hash> {
    private static readonly pb::MessageParser<Hash> _parser = new pb::MessageParser<Hash>(() => new Hash());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hash> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Types.CoreReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hash() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hash(Hash other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hash Clone() {
      return new Hash(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private pb::ByteString value_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hash);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hash other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hash other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Value = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SInt32Value : pb::IMessage<SInt32Value> {
    private static readonly pb::MessageParser<SInt32Value> _parser = new pb::MessageParser<SInt32Value>(() => new SInt32Value());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SInt32Value> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Types.CoreReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SInt32Value() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SInt32Value(SInt32Value other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SInt32Value Clone() {
      return new SInt32Value(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SInt32Value);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SInt32Value other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SInt32Value other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SInt64Value : pb::IMessage<SInt64Value> {
    private static readonly pb::MessageParser<SInt64Value> _parser = new pb::MessageParser<SInt64Value>(() => new SInt64Value());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SInt64Value> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Types.CoreReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SInt64Value() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SInt64Value(SInt64Value other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SInt64Value Clone() {
      return new SInt64Value(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private long value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SInt64Value);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SInt64Value other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0L) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SInt64Value other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0L) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MerklePath : pb::IMessage<MerklePath> {
    private static readonly pb::MessageParser<MerklePath> _parser = new pb::MessageParser<MerklePath>(() => new MerklePath());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MerklePath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Types.CoreReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MerklePath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MerklePath(MerklePath other) : this() {
      merklePathNodes_ = other.merklePathNodes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MerklePath Clone() {
      return new MerklePath(this);
    }

    /// <summary>Field number for the "merkle_path_nodes" field.</summary>
    public const int MerklePathNodesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Types.MerklePathNode> _repeated_merklePathNodes_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Types.MerklePathNode.Parser);
    private readonly pbc::RepeatedField<global::AElf.Types.MerklePathNode> merklePathNodes_ = new pbc::RepeatedField<global::AElf.Types.MerklePathNode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Types.MerklePathNode> MerklePathNodes {
      get { return merklePathNodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MerklePath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MerklePath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!merklePathNodes_.Equals(other.merklePathNodes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= merklePathNodes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      merklePathNodes_.WriteTo(output, _repeated_merklePathNodes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += merklePathNodes_.CalculateSize(_repeated_merklePathNodes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MerklePath other) {
      if (other == null) {
        return;
      }
      merklePathNodes_.Add(other.merklePathNodes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            merklePathNodes_.AddEntriesFrom(input, _repeated_merklePathNodes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MerklePathNode : pb::IMessage<MerklePathNode> {
    private static readonly pb::MessageParser<MerklePathNode> _parser = new pb::MessageParser<MerklePathNode>(() => new MerklePathNode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MerklePathNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Types.CoreReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MerklePathNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MerklePathNode(MerklePathNode other) : this() {
      hash_ = other.hash_ != null ? other.hash_.Clone() : null;
      isLeftChildNode_ = other.isLeftChildNode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MerklePathNode Clone() {
      return new MerklePathNode(this);
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 1;
    private global::AElf.Types.Hash hash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash Hash {
      get { return hash_; }
      set {
        hash_ = value;
      }
    }

    /// <summary>Field number for the "is_left_child_node" field.</summary>
    public const int IsLeftChildNodeFieldNumber = 2;
    private bool isLeftChildNode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLeftChildNode {
      get { return isLeftChildNode_; }
      set {
        isLeftChildNode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MerklePathNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MerklePathNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Hash, other.Hash)) return false;
      if (IsLeftChildNode != other.IsLeftChildNode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (hash_ != null) hash ^= Hash.GetHashCode();
      if (IsLeftChildNode != false) hash ^= IsLeftChildNode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (hash_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Hash);
      }
      if (IsLeftChildNode != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsLeftChildNode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (hash_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hash);
      }
      if (IsLeftChildNode != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MerklePathNode other) {
      if (other == null) {
        return;
      }
      if (other.hash_ != null) {
        if (hash_ == null) {
          Hash = new global::AElf.Types.Hash();
        }
        Hash.MergeFrom(other.Hash);
      }
      if (other.IsLeftChildNode != false) {
        IsLeftChildNode = other.IsLeftChildNode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (hash_ == null) {
              Hash = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Hash);
            break;
          }
          case 16: {
            IsLeftChildNode = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BinaryMerkleTree : pb::IMessage<BinaryMerkleTree> {
    private static readonly pb::MessageParser<BinaryMerkleTree> _parser = new pb::MessageParser<BinaryMerkleTree>(() => new BinaryMerkleTree());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BinaryMerkleTree> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Types.CoreReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinaryMerkleTree() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinaryMerkleTree(BinaryMerkleTree other) : this() {
      nodes_ = other.nodes_.Clone();
      root_ = other.root_ != null ? other.root_.Clone() : null;
      leafCount_ = other.leafCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinaryMerkleTree Clone() {
      return new BinaryMerkleTree(this);
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Types.Hash> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Types.Hash.Parser);
    private readonly pbc::RepeatedField<global::AElf.Types.Hash> nodes_ = new pbc::RepeatedField<global::AElf.Types.Hash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Types.Hash> Nodes {
      get { return nodes_; }
    }

    /// <summary>Field number for the "root" field.</summary>
    public const int RootFieldNumber = 2;
    private global::AElf.Types.Hash root_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash Root {
      get { return root_; }
      set {
        root_ = value;
      }
    }

    /// <summary>Field number for the "leaf_count" field.</summary>
    public const int LeafCountFieldNumber = 3;
    private int leafCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeafCount {
      get { return leafCount_; }
      set {
        leafCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BinaryMerkleTree);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BinaryMerkleTree other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nodes_.Equals(other.nodes_)) return false;
      if (!object.Equals(Root, other.Root)) return false;
      if (LeafCount != other.LeafCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nodes_.GetHashCode();
      if (root_ != null) hash ^= Root.GetHashCode();
      if (LeafCount != 0) hash ^= LeafCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nodes_.WriteTo(output, _repeated_nodes_codec);
      if (root_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Root);
      }
      if (LeafCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LeafCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      if (root_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Root);
      }
      if (LeafCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeafCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BinaryMerkleTree other) {
      if (other == null) {
        return;
      }
      nodes_.Add(other.nodes_);
      if (other.root_ != null) {
        if (root_ == null) {
          Root = new global::AElf.Types.Hash();
        }
        Root.MergeFrom(other.Root);
      }
      if (other.LeafCount != 0) {
        LeafCount = other.LeafCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
          case 18: {
            if (root_ == null) {
              Root = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Root);
            break;
          }
          case 24: {
            LeafCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
