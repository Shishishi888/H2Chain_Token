/**
 * AElf Standards ACS0(Contract Deployment Standard)
 *
 * Used to manage the deployment and update of contracts.
 */
syntax = "proto3";
option java_package = "io.aelf.protobuf.generated";

import public "client.proto";
import public "core.proto";
import "options.proto";

//message ContractInfo
//{
//  // The serial number of the contract.
//  int64 serial_number = 1;
//  // The author of the contract, this is the person who deployed the contract.
//  Address author = 2;
//  // The category of contract code(0: C#).
//  sint32 category = 3;
//  // The hash of the contract code.
//  Hash code_hash = 4;
//  // Whether it is a system contract.
//  bool is_system_contract = 5;
//  // The version of the current contract.
//  int32 version = 6;
//}

message ContractDeploymentInput {
  // The category of contract code(0: C#).
  sint32 category = 1;
  // The byte array of the contract code.
  bytes code = 2;
}
//
//message SystemContractDeploymentInput {
//  message SystemTransactionMethodCall {
//    // The method name of system transaction.
//    string method_name = 1;
//    // The params of system transaction method.
//    bytes params = 2;
//  }
//  message SystemTransactionMethodCallList {
//    // The list of system transactions.
//    repeated SystemTransactionMethodCall value = 1;
//  }
//  // The category of contract code(0: C#).
//  sint32 category = 1;
//  // The byte array of the contract code.
//  bytes code = 2;
//  // The name of the contract. It has to be unique.
//  Hash name = 3;
//  // An initial list of transactions for the system contract,
//  // which is executed in sequence when the contract is deployed.
//  SystemTransactionMethodCallList transaction_method_call_list = 4;
//}
//
//message ContractUpdateInput {
//  // The contract address that needs to be updated.
//  Address address = 1;
//  // The byte array of the new contract code.
//  bytes code = 2;
//}
//
//message ContractCodeCheckInput{
//  // The byte array of the contract code to be checked.
//  bytes contract_input = 1;
//  // Whether the input contract is to be deployed or updated.
//  bool is_contract_deployment = 2;
//  // Method to call after code check complete(DeploySmartContract or UpdateSmartContract).
//  string code_check_release_method = 3;
//  // The id of the proposed contract.
//  Hash proposed_contract_input_hash = 4;
//  // The category of contract code(0: C#).
//  sint32 category = 5;
//  // Indicates if the contract is the system contract.
//  bool is_system_contract = 6;
//}
//
//message ContractProposed
//{
//  option (is_event) = true;
//  // The id of the proposed contract.
//  Hash proposed_contract_input_hash = 1;
//}
//
//message ContractDeployed
//{
//  option (is_event) = true;
//  // The author of the contract, this is the person who deployed the contract.
//  Address author = 1 [(is_indexed) = true];
//  // The hash of the contract code.
//  Hash code_hash = 2 [(is_indexed) = true];
//  // The address of the contract.
//  Address address = 3;
//  // The version of the current contract.
//  int32 version = 4;
//  // The name of the contract. It has to be unique.
//  Hash Name = 5;
//}
//
//message CodeCheckRequired
//{
//  option (is_event) = true;
//  // The byte array of the contract code.
//  bytes code = 1;
//  // The id of the proposed contract.
//  Hash proposed_contract_input_hash = 2;
//  // The category of contract code(0: C#).
//  sint32 category = 3;
//  // Indicates if the contract is the system contract.
//  bool is_system_contract = 4;
//}
//
//message CodeUpdated
//{
//  option (is_event) = true;
//  // The address of the updated contract.
//  Address address = 1 [(is_indexed) = true];
//  // The byte array of the old contract code.
//  Hash old_code_hash = 2;
//  // The byte array of the new contract code.
//  Hash new_code_hash = 3;
//  // The version of the current contract.
//  int32 version = 4;
//}
//
//message ValidateSystemContractAddressInput {
//  // The name hash of the contract.
//  Hash system_contract_hash_name = 1;
//  // The address of the contract.
//  Address address = 2;
//}
//
//message ReleaseContractInput {
//  // The hash of the proposal.
//  Hash proposal_id = 1;
//  // The id of the proposed contract.
//  Hash proposed_contract_input_hash = 2;
//}